# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
        
# define hand class
class Hand:
    def __init__(self, deal_flag):
        self.play_hand = []
        self.deal_flag = deal_flag
        
    def __str__(self):
       report_hand = ""
       i = 0
       if len(self.play_hand) > 0:
           while i < len(self.play_hand):
               report_hand += str(self.play_hand[i]) + " "
               i += 1
           return "Hand contains " + report_hand
       else:
            return "Hand is empty"

    def add_card(self, card):
        self.play_hand.append(card)   

    def get_value(self):
        ace_flag = False
        self.value = 0
        for Card in self.play_hand:
            ace_flag = 'A' in (Card.rank)
            self.value += VALUES[Card.rank]
        if ace_flag == False:
            return self.value
        elif ace_flag == True:
            if self.value + 10 <= 21:
               return self.value + 10
            else:
               return self.value  
   
    def draw(self, canvas, pos):
        i = 0
        j = 0
        if self.deal_flag:
            j = 300
            if in_play:
               canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [135, 148], CARD_BACK_SIZE)
        for card in self.play_hand:
            if self.deal_flag and in_play:
                i = 1
                card.draw(canvas, [100+i*75,400-j])
                i += 1    
            elif self.deal_flag and not in_play:
                card.draw(canvas, [100+i*75,400-j])
                i += 1
            else:   
                card.draw(canvas, [100+i*75,400-j])
                i += 1   
                
# define deck class 
class Deck:
      
    def __init__(self):
        self.current_deck = []
        i = 0
        for i in range(13):
            for j in range (4):
                self.current_deck.append(Card(SUITS[j],RANKS[i]))
                j += 1
            i += 1

    def shuffle(self):
        # shuffle the deck 
        random.shuffle(self.current_deck)

    def deal_card(self):
        global dealt
        dealt = self.current_deck[0]
        self.current_deck.pop(0)
        return dealt
        
    def __str__(self):
       report_deck = ""
       i = 0
       if len(self.current_deck) > 0:
           while i < len(self.current_deck):
               report_deck += str(self.current_deck[i]) + " "
               i += 1
           return "Deck contains " + report_deck
       else:
            return "Deck is empty"

#define event handlers for buttons
def deal():
    global outcome, in_play, play_deck, player_hand, dealer_hand, score
    if in_play:
        outcome = "Player Forfeits"
        score -= 1
        print outcome  
    play_deck = Deck()
    player_hand = Hand(False)
    dealer_hand = Hand(True)
    play_deck.shuffle()
    play_deck.deal_card()
    player_hand.add_card(dealt)
    play_deck.deal_card()
    dealer_hand.add_card(dealt)
    play_deck.deal_card()
    player_hand.add_card(dealt)
    play_deck.deal_card()
    dealer_hand.add_card(dealt)
    p_hand_value = player_hand.get_value()
    d_hand_value = dealer_hand.get_value()
    in_play = True
    outcome = "Hit or Stand?"
    
def hit():
    global in_play, outcome, score
    if in_play:
        play_deck.deal_card()
        player_hand.add_card(dealt)
        p_hand_value = player_hand.get_value()
        if p_hand_value > 21:
            outcome = "You have busted. Deal again?"
            in_play = False
            score -= 1
         
    # if the hand is in play, hit the player
   
    # if busted, assign a message to outcome, update in_play and score
       
def stand():
    global in_play, outcome, score
    p_hand_value = player_hand.get_value()
    d_hand_value = dealer_hand.get_value()
    if p_hand_value >=22:
        outcome = "You busted. Deal again?"
        score -= 1
    else:    
        if in_play:
           while d_hand_value < 17:
               play_deck.deal_card()
               dealer_hand.add_card(dealt)
               d_hand_value = dealer_hand.get_value()
           if d_hand_value == 21:
               outcome = "Dealer gets Blackjack, you lose. Deal again?"
               score -= 1
           elif d_hand_value > 21:     
               outcome = "Dealer busts, you win. Deal again?"
               score += 1
           elif d_hand_value >= p_hand_value:
               outcome = "Dealer has high cards, you lose. Deal again?"
               score -= 1             
           elif d_hand_value < p_hand_value:     
               outcome = "Player has high cards, you win. Deal again?"
               score += 1                 
           in_play = False
                                 
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more

    # assign a message to outcome, update in_play and score

# draw handler    http://www.codeskulptor.org/#user38_V64ousFyt6R6lpQ.py
def draw(canvas):
    # test to make sure that card.draw works, replace with your code below
    
    player_hand.draw(canvas, [0, 300])
    dealer_hand.draw(canvas, [0, 300])
    canvas.draw_text(outcome, [100, 300], 24, 'White')
    canvas.draw_text('Blackjack', [250, 45], 42, 'White')
    canvas.draw_text('Score: ' + str(score), [450, 85], 30, 'White')

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
